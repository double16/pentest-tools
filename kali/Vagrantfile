# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  host_arch = RbConfig::CONFIG['host_cpu']
  if host_arch.include?('arm64') || host_arch.include?('aarch64')
    # VAGRANT_DEFAULT_PROVIDER=vmware_fusion
    config.vm.box = "mdiazn80/kali-arm64"
  else
    host_arch = "amd64"
    config.vm.box = "kalilinux/rolling"
  end

  config.vm.box_check_update = false
  # config.vagrant.plugins = ["vagrant-disksize"]
  if Vagrant.has_plugin?("vagrant-disksize")
    config.disksize.size = '300GB'
  end
  config.vm.box_check_update = false
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  # config.vm.network "private_network", ip: "192.168.33.10"
  # config.vm.network "public_network"
  # config.vm.synced_folder "../data", "/vagrant_data"

  config.vm.provision "shell", name: "config", privileged: true, inline: <<-SCRIPT
    gsettings set org.gnome.desktop.screensaver idle-activation-enabled false
    ln -sf /usr/share/zoneinfo/US/Central /etc/localtime
  SCRIPT

  config.vm.provision "shell", name: "pia", privileged: false, inline: <<-SCRIPT
    [[ -f /usr/local/bin/piactl ]] && exit 0
    PIA_VER="3.5.7-08120"
    if [ "#{host_arch}" == "arm64" ]; then
      curl -L -o /tmp/pia.run https://installers.privateinternetaccess.com/download/pia-linux-arm64-${PIA_VER}.run
    else
      curl -L -o /tmp/pia.run https://installers.privateinternetaccess.com/download/pia-linux-${PIA_VER}.run
    fi
    bash /tmp/pia.run --quiet --accept
    rm /tmp/pia.run
  SCRIPT

  config.vm.provision "shell", name: "repos", privileged: false, inline: <<-SCRIPT
    git config --global pull.rebase true
    mkdir -p /home/vagrant/src || exit $?
    cd /home/vagrant/src
    for URL in \
        https://github.com/fuzzdb-project/fuzzdb.git \
        https://github.com/szski/shapeshifter.git \
        https://github.com/vladko312/SSTImap.git \
        https://github.com/swisskyrepo/SSRFmap.git \
        https://github.com/carlospolop/Auto_Wordlists.git \
        https://github.com/hansmach1ne/LFImap.git \
        https://github.com/double16/shadycompass.git \
        https://github.com/gwen001/github-search.git \
        https://github.com/blechschmidt/massdns.git \
        https://github.com/vitorfhc/lemma-fork.git \
      ; do
      D="$(basename "${URL}" | sed 's/.git$//')"
      if [[ -d "${D}" ]]; then
        ( cd "${D}" && git pull --depth=1 )
      else
        git clone --depth 1 "${URL}"
      fi
    done
  SCRIPT

  config.vm.provision "shell", name: "obsidian", privileged: false, inline: <<-SCRIPT
    OBSIDIAN_VER=1.6.7
    if [ "#{host_arch}" == "arm64" ]; then
      OBSIDIAN_PKG="https://github.com/obsidianmd/obsidian-releases/releases/download/v${OBSIDIAN_VER}/Obsidian-${OBSIDIAN_VER}-arm64.AppImage"
    else
      OBSIDIAN_PKG="https://github.com/obsidianmd/obsidian-releases/releases/download/v${OBSIDIAN_VER}/Obsidian-${OBSIDIAN_VER}.AppImage"
    fi
    if [[ ! -f ${HOME}/Desktop/Obsidian.AppImage ]]; then
      curl --fail -o ${HOME}/Desktop/Obsidian.AppImage -L "${OBSIDIAN_PKG}"
      chmod +x ${HOME}/Desktop/Obsidian.AppImage
    fi
  SCRIPT

  config.vm.provision "shell", name: "caido", privileged: false, inline: <<-SCRIPT
    set -e
    CAIDO_VER=0.40.0
    if [ "#{host_arch}" == "arm64" ]; then
      CAIDO_CLI_PKG="https://storage.googleapis.com/caido-releases/v${CAIDO_VER}/caido-cli-v${CAIDO_VER}-linux-aarch64.tar.gz"
    else
      CAIDO_PKG="https://storage.googleapis.com/caido-releases/v${CAIDO_VER}/caido-desktop-v${CAIDO_VER}-linux-x86_64.AppImage"
      CAIDO_CLI_PKG="https://storage.googleapis.com/caido-releases/v${CAIDO_VER}/caido-cli-v${CAIDO_VER}-linux-x86_64.tar.gz"
    fi
    if [[ -n "${CAIDO_PKG}" ]]; then
        if [[ ! -f ${HOME}/Desktop/Caido.AppImage ]]; then
          curl --fail -o ${HOME}/Desktop/Caido.AppImage -L "${CAIDO_PKG}"
          chmod +x ${HOME}/Desktop/Caido.AppImage
        fi
    fi
    if [[ -n "${CAIDO_CLI_PKG}" ]]; then
        if [[ ! -f /usr/local/bin/caido-cli ]]; then
          curl --fail -o /tmp/caido-cli.tar.gz -L "${CAIDO_CLI_PKG}"
          sudo tar -xz -C /usr/local/bin -f /tmp/caido-cli.tar.gz
          sudo chmod +x /usr/local/bin/caido-cli
          rm /tmp/caido-cli.tar.gz
        fi
    fi
  SCRIPT

  config.vm.provision "shell", name: "profile", privileged: true, env: { 'DEBIAN_FRONTEND': 'noninteractive'}, inline: <<-SCRIPT
    cp -u /vagrant/container/kali/{llm-functions,local-bin}.sh /etc/profile.d/
  SCRIPT

  config.vm.provision "shell", name: "packages", privileged: true, env: { 'DEBIAN_FRONTEND': 'noninteractive'}, inline: <<-SCRIPT
    set -e
    apt-get update

    if ! command -v snap; then
      apt install -y snapd
      systemctl enable --now snapd
      systemctl enable --now snapd.apparmor
    fi

    # https://www.kali.org/docs/general-use/metapackages/
    apt install -y --install-recommends \
        build-essential \
        kali-defaults-desktop cool-retro-term \
        kali-tools-fuzzing kali-tools-crypto-stego kali-tools-database kali-tools-exploitation kali-tools-identify \
        kali-tools-information-gathering kali-tools-passwords kali-tools-post-exploitation kali-tools-vulnerability kali-tools-web kali-tools-windows-resources \
        linux-headers-#{host_arch} zsh-autosuggestions zsh-syntax-highlighting zsh-theme-powerlevel9k jq htop code-oss golang-go neovim \
        seclists payloadsallthethings \
        gobuster hakrawler xxd file nikto wpscan joomscan nuclei whatweb hydra xsser python3-selenium feroxbuster \
          getsploit sploitscan vopono gowitness python3-dploot autorecon httprobe ghidra \
          flameshot gron zbar-tools \
        vim-gtk3 \

    apt autoremove -y

    if command -v go; then
      test -f /home/vagrant/go/bin/interactsh-client || su vagrant -c "go install -v github.com/projectdiscovery/interactsh/cmd/interactsh-client@latest"
      test -f /home/vagrant/go/bin/katana || su vagrant -c "go install github.com/projectdiscovery/katana/cmd/katana@latest"
      test -f /home/vagrant/go/bin/meg || su vagrant -c "go install github.com/tomnomnom/meg@latest"
      test -f /home/vagrant/go/bin/anew || su vagrant -c "go install -v github.com/tomnomnom/anew@latest"
      test -f /home/vagrant/go/bin/unfurl || su vagrant -c "go install github.com/tomnomnom/unfurl@latest"
      test -f /home/vagrant/go/bin/gf || su vagrant -c "go install github.com/tomnomnom/gf@latest"
      test -f /home/vagrant/go/bin/gau || su vagrant -c "go install github.com/lc/gau/v2/cmd/gau@latest"
      test -f /home/vagrant/go/bin/fabric || su vagrant -c "go install github.com/danielmiessler/fabric@latest"
    fi

    if ! test -f /usr/local/bin/shadycompass; then
      curl -L -o /usr/local/bin/shadycompass https://github.com/double16/shadycompass/releases/download/latest/shadycompass_main_linux_amd64
      chmod 0755 /usr/local/bin/shadycompass
    fi

    command -v llm || pip install --root-user-action ignore llm
  SCRIPT

  config.vm.provision "shell", name: "zap", privileged: false, env: { 'DEBIAN_FRONTEND': 'noninteractive'},
                      path: "zap-install.sh"

  config.vm.provision "shell", name: "zap-clean",
                      # after: "zap",
                      privileged: true, run: "never", env: { 'DEBIAN_FRONTEND': 'noninteractive'},
                      path: "zap-install.sh", args: ["--clean"]

  config.vm.provision "shell", name: "google-chrome",
                      privileged: true,
                      run: host_arch == 'amd64' ? "once" : "never",
                      env: { 'DEBIAN_FRONTEND': 'noninteractive'}, inline: <<-SCRIPT
    cd /tmp
    wget https://dl.google.com/linux/direct/google-chrome-stable_current_#{host_arch}.deb
    apt install -y /tmp/google-chrome-stable_current_#{host_arch}.deb
    rm /tmp/google-chrome-stable_current_#{host_arch}.deb
  SCRIPT

  config.vm.provision "shell", name: "docker", privileged: true, run: "never", env: { 'DEBIAN_FRONTEND': 'noninteractive'}, inline: <<-SCRIPT
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
    chmod a+r /etc/apt/keyrings/docker.asc

    # Add the repository to Apt sources. May need to adjust distro name.
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
      bookworm stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io
    adduser vagrant docker
    if [ "#{host_arch}" == "arm64" ]; then
        # allow amd64 containers
        apt-get install -y qemu-user-static binfmt-support
        update-binfmts --enable qemu-x86_64
        docker run --rm --privileged tonistiigi/binfmt --install all
        docker buildx create --use
    fi
  SCRIPT

  config.vm.provision "shell", name: "autologin", privileged: true, inline: <<-SCRIPT
    if [[ "$(</etc/X11/default-display-manager)" =~ "lightdm" ]]; then
      sed -i -e 's/#autologin-guest\s*=.*/autologin-guest=false/' -e 's/#autologin-user\s*=.*/autologin-user=vagrant/' -e 's/#autologin-user-timeout\s*=.*/autologin-user-timeout=0/' /etc/lightdm/lightdm.conf
    elif [[ "$(</etc/X11/default-display-manager)" =~ "gdm" ]]; then
      sed -i -e 's/#\s*AutomaticLoginEnable\s*=.*/AutomaticLoginEnable=true/' -e 's/#\s*AutomaticLogin\s*=.*/AutomaticLogin=vagrant/' /etc/gdm3/daemon.conf
    fi
  SCRIPT

  config.vm.provision "shell", name: "lockscreen", privileged: true, inline: <<-SCRIPT
        mkdir -p "/home/vagrant/.config/xfce4/xfconf/xfce-perchannel-xml"
        cat > "/home/vagrant/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-power-manager.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>

<channel name="xfce4-power-manager" version="1.0">
  <property name="xfce4-power-manager" type="empty">
    <property name="power-button-action" type="empty"/>
    <property name="show-panel-label" type="empty"/>
    <property name="show-tray-icon" type="bool" value="false"/>
    <property name="lock-screen-suspend-hibernate" type="bool" value="false"/>
    <property name="dpms-enabled" type="bool" value="false"/>
    <property name="blank-on-battery" type="int" value="0"/>
    <property name="blank-on-ac" type="int" value="0"/>
    <property name="logind-handle-lid-switch" type="bool" value="false"/>
  </property>
</channel>
EOF
        cat > "/home/vagrant/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-screensaver.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>

<channel name="xfce4-screensaver" version="1.0">
  <property name="lock" type="empty">
    <property name="sleep-activation" type="bool" value="false"/>
  </property>
</channel>
EOF
  SCRIPT

  config.vm.provision "shell", name: "dropbox",
                      privileged: false,
                      run: "never",
                      env: { 'DEBIAN_FRONTEND': 'noninteractive'}, inline: <<-SCRIPT
    set -e
    if true || [ "#{host_arch}" == "arm64" ]; then
        # use open source client: https://github.com/samschott/maestral
        [ -e "/usr/local/bin/dropbox" ] && exit 0
        sudo apt-get install -y libxcb-cursor0
        sudo cp /vagrant/dropbox-maestral.sh /usr/local/bin/dropbox
        sudo chmod +x /usr/local/bin/dropbox
    else
        [ -e "${HOME}/.dropbox-dist/dropboxd" ] && exit 0
        URL="https://www.dropbox.com/download?plat=lnx.x86_64"
        curl -L "${URL}" | tar -xzf - -C "${HOME}"
        sudo curl -L -o /usr/local/bin/dropbox https://www.dropbox.com/download?dl=packages/dropbox.py
        sudo chmod +x /usr/local/bin/dropbox
    fi
  SCRIPT

  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true
    # linked clones cannot increase disk space
    vb.linked_clone = false
    vb.memory = "12288"
    vb.cpus = 6
  end
  config.vm.provider "vmware_fusion" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true
    # linked clones cannot increase disk space
    vb.linked_clone = false
    vb.memory = "12288"
    vb.cpus = 6
  end
  config.vm.provider "libvirt" do |libvirt|
    libvirt.memory = "12288"
    libvirt.cpus = 6
    libvirt.driver = "qemu"
    libvirt.features = ['apic', 'pae' ]
    libvirt.usb_controller :model => "qemu-xhci"
    libvirt.input :type => "tablet", :bus => "usb"
  end
end
