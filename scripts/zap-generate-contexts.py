#!/usr/bin/python3
import os.path
import re
import sys
import xml.etree.ElementTree as ET

CONTEXT_TEMPLATE = """<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<configuration>
    <context>
        <name>Default Context</name>
        <desc></desc>
        <inscope>true</inscope>
        <!--
        <incregexes>https?://www\\.included\\.com.*</incregexes>
        <excregexes>https?://www\\.excluded\\.com.*</excregexes>
        -->
        <tech>
            <include>Db</include>
            <include>Db.CouchDB</include>
            <include>Db.Firebird</include>
            <include>Db.HypersonicSQL</include>
            <include>Db.IBM DB2</include>
            <include>Db.MariaDB</include>
            <include>Db.Microsoft Access</include>
            <include>Db.Microsoft SQL Server</include>
            <include>Db.MongoDB</include>
            <include>Db.MySQL</include>
            <include>Db.Oracle</include>
            <include>Db.PostgreSQL</include>
            <include>Db.SAP MaxDB</include>
            <include>Db.SQLite</include>
            <include>Db.Sybase</include>
            <include>Language</include>
            <include>Language.ASP</include>
            <include>Language.C</include>
            <include>Language.JSP/Servlet</include>
            <include>Language.Java</include>
            <include>Language.Java.Spring</include>
            <include>Language.JavaScript</include>
            <include>Language.PHP</include>
            <include>Language.Python</include>
            <include>Language.Ruby</include>
            <include>Language.XML</include>
            <include>OS</include>
            <include>OS.Linux</include>
            <include>OS.MacOS</include>
            <include>OS.Windows</include>
            <include>SCM</include>
            <include>SCM.Git</include>
            <include>SCM.SVN</include>
            <include>WS</include>
            <include>WS.Apache</include>
            <include>WS.IIS</include>
            <include>WS.Tomcat</include>
        </tech>
        <urlparser>
            <class>org.zaproxy.zap.model.StandardParameterParser</class>
            <config>{"kvps":"&amp;","kvs":"=","struct":[]}</config>
        </urlparser>
        <postparser>
            <class>org.zaproxy.zap.model.StandardParameterParser</class>
            <config>{"kvps":"&amp;","kvs":"=","struct":[]}</config>
        </postparser>
        <authentication>
            <type>0</type>
            <strategy>EACH_RESP</strategy>
            <pollurl/>
            <polldata/>
            <pollheaders/>
            <pollfreq>60</pollfreq>
            <pollunits>REQUESTS</pollunits>
        </authentication>
        <forceduser>-1</forceduser>
        <session>
            <type>0</type>
        </session>
        <authorization>
            <type>0</type>
            <basic>
                <header/>
                <body/>
                <logic>AND</logic>
                <code>-1</code>
            </basic>
        </authorization>
    </context>
</configuration>
"""

if len(sys.argv) < 2:
    print("Usage: specify url file names, named like urls-context_name.txt, special urls-exclude.txt for excludes", file=sys.stderr)
    exit(1)

include_files: list[str] = []
exclude_patterns: set[str] = set()

for file_name in sys.argv[1:]:
    if not os.path.isfile(file_name):
        print(f"{file_name} is not a file", file=sys.stderr)
        exit(2)
    if "exclude" in file_name:
        with open(file_name, "rt") as fd:
            for line in fd:
                line = line.strip()
                if line and not line.startswith("#"):
                    exclude_patterns.add(line)
    else:
        include_files.append(file_name)


def ensure_context(context_name: str, includes: list[str]):
    context_file = context_name + ".context"
    if os.path.isfile(context_file):
        print(f"{context_file}: already exists, not overwriting", file=sys.stderr)
        return
    tree = ET.ElementTree(ET.fromstring(CONTEXT_TEMPLATE))
    context_root: ET.Element = tree.find('context')
    context_root.find('name').text = context_name
    for line in includes:
        if '\\.' not in line:
            line = line.replace('.', '\\.')
        if '.*' not in line:
            line = line.replace('*', '.*')
        if line.startswith('http://'):
            line = 'https?://' + line[7:]
        elif line.startswith('https://'):
            line = 'https?://' + line[8:]
        else:
            line = 'https?://' + line
        try:
            line.index('/', 9)
        except ValueError:
            line = line + ".*"
        ET.SubElement(context_root, 'incregexes').text = line
    for exclude_line in exclude_patterns:
        ET.SubElement(context_root, 'excregexes').text = exclude_line
    ET.indent(tree)
    tree.write(context_file, xml_declaration=True, short_empty_elements=False)
    print(f"{context_file}: written")


for include_file in include_files:
    if '-include' in include_file:
        with open(include_file, "rt") as fd:
            for line in fd:
                line = line.strip()
                if line and not line.startswith("#"):
                    context_name = line.replace('\\.', '.').replace('.*', '').replace('*', '')
                    context_name = re.sub('https?://', '', context_name)
                    context_name = context_name.split('/')[0]
                    ensure_context(context_name, [line])
    else:
        context_name = include_file.removeprefix('urls-').removesuffix('.txt')
        includes = []
        with open(include_file, "rt") as fd:
            for line in fd:
                line = line.strip()
                if line and not line.startswith("#"):
                    includes.append(line)
        ensure_context(context_name, includes)


exit(0)
