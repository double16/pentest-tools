#!/usr/bin/env python3

import argparse
import os
import sys

# Helper function to read from file or return the argument as a list
def process_input(arg):
    if os.path.isfile(arg):
        with open(arg, 'r') as file:
            return [line.strip() for line in file.readlines()]
    else:
        return arg.split()

# Set up argparse
parser = argparse.ArgumentParser(description="Generate file names based on characters, target extensions, allowed extensions, and a basename.")

# Arguments with short options
parser.add_argument(
    "-c", "--chars",
    nargs="+",
    default=['%20', '%0a', '%00', '%0d0a', '/', '.\\', '.', 'â€¦', ':'],
    help="List of characters or a file containing characters to insert into the filename (default: common URL-encoded characters and special characters)."
)

parser.add_argument(
    "-t", "--target-exts",
    nargs="+",
    default=['.php', '.phps'],
    help="List of target extensions or a file containing target extensions (default: ['.php', '.phps'])."
)

parser.add_argument(
    "-a", "--allowed-exts",
    nargs="+",
    default=['.jpg'],
    help="List of allowed extensions or a file containing allowed extensions (default: ['.jpg'])."
)

parser.add_argument(
    "-b", "--basename",
    default='shell',
    help="Basename for the file (default: 'shell')."
)

parser.add_argument(
    "-o", "--output",
    default=None,
    help="Optional file to save output. Defaults to standard output."
)

# Parse arguments
args = parser.parse_args()

# Process chars, target-exts, and allowed-exts to check if they are files
chars = []
for item in args.chars:
    chars.extend(process_input(item))

target_exts = []
for item in args.target_exts:
    target_exts.extend(process_input(item))

allowed_exts = []
for item in args.allowed_exts:
    allowed_exts.extend(process_input(item))

# Open file if output is specified, otherwise use sys.stdout
output_file = open(args.output, 'w') if args.output else sys.stdout

# Loop through the combinations and write to the output
for char in chars:
    for ext in target_exts:
        for allowed_ext in allowed_exts:
            output_file.write(f"{args.basename}{char}{ext}{allowed_ext}\n")
            output_file.write(f"{args.basename}{ext}{char}{allowed_ext}\n")
            output_file.write(f"{args.basename}{allowed_ext}{char}{ext}\n")
            output_file.write(f"{args.basename}{allowed_ext}{ext}{char}\n")

# Close file if output is specified
if args.output:
    output_file.close()
